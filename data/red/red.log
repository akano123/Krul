[16/10/2017 01:09] ERROR red on_command_error 369: Exception in command 'animeset'
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\sslproto.py", line 502, in data_received
    ssldata, appdata = self._sslpipe.feed_ssldata(data)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\sslproto.py", line 201, in feed_ssldata
    self._sslobj.do_handshake()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\ssl.py", line 641, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 1] Can not connect to myanimelist.net:443 [[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 36, in animeset
    await self.owner_set(ctx)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 168, in owner_set
    if await self.credential_verfication(username.content, password.content):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 214, in credential_verfication
    async with session.get(url) as response:
  File "lib\aiohttp\client.py", line 565, in __aenter__
    self._resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 1] Cannot connect to host myanimelist.net:443 ssl:True [Can not connect to myanimelist.net:443 [[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)]]
[16/10/2017 01:11] ERROR red on_command_error 369: Exception in command 'animeset'
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\sslproto.py", line 502, in data_received
    ssldata, appdata = self._sslpipe.feed_ssldata(data)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\sslproto.py", line 201, in feed_ssldata
    self._sslobj.do_handshake()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\ssl.py", line 641, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 1] Can not connect to myanimelist.net:443 [[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 36, in animeset
    await self.owner_set(ctx)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 168, in owner_set
    if await self.credential_verfication(username.content, password.content):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\animelist.py", line 214, in credential_verfication
    async with session.get(url) as response:
  File "lib\aiohttp\client.py", line 565, in __aenter__
    self._resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 1] Cannot connect to host myanimelist.net:443 ssl:True [Can not connect to myanimelist.net:443 [[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:719)]]
[16/10/2017 01:38] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[16/10/2017 01:38] ERROR red load_cogs 573: HTTPSConnectionPool(host='api.imgur.com', port=443): Max retries exceeded with url: /3/credits (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x0000000005D79828>: Failed to establish a new connection: [Errno 11004] getaddrinfo failed',))
Traceback (most recent call last):
  File "lib\urllib3\connection.py", line 141, in _new_conn
    (self.host, self.port), self.timeout, **extra_kw)
  File "lib\urllib3\util\connection.py", line 60, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\urllib3\connectionpool.py", line 601, in urlopen
    chunked=chunked)
  File "lib\urllib3\connectionpool.py", line 346, in _make_request
    self._validate_conn(conn)
  File "lib\urllib3\connectionpool.py", line 850, in _validate_conn
    conn.connect()
  File "lib\urllib3\connection.py", line 284, in connect
    conn = self._new_conn()
  File "lib\urllib3\connection.py", line 150, in _new_conn
    self, "Failed to establish a new connection: %s" % e)
urllib3.exceptions.NewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x0000000005D79828>: Failed to establish a new connection: [Errno 11004] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\requests\adapters.py", line 440, in send
    timeout=timeout
  File "lib\urllib3\connectionpool.py", line 639, in urlopen
    _stacktrace=sys.exc_info()[2])
  File "lib\urllib3\util\retry.py", line 388, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.imgur.com', port=443): Max retries exceeded with url: /3/credits (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x0000000005D79828>: Failed to establish a new connection: [Errno 11004] getaddrinfo failed',))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 570, in load_cogs
    owner_cog._load_cog(extension)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 947, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\image.py", line 168, in setup
    bot.add_cog(Image(bot))
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\image.py", line 22, in __init__
    self.imgur = ImgurClient(CLIENT_ID, CLIENT_SECRET)
  File "lib\imgurpython\client.py", line 85, in __init__
    self.credits = self.get_credits()
  File "lib\imgurpython\client.py", line 94, in get_credits
    return self.make_request('GET', 'credits', None, True)
  File "lib\imgurpython\client.py", line 131, in make_request
    response = method_to_call(url, headers=header, params=data, data=data)
  File "lib\requests\api.py", line 72, in get
    return request('get', url, params=params, **kwargs)
  File "lib\requests\api.py", line 58, in request
    return session.request(method=method, url=url, **kwargs)
  File "lib\requests\sessions.py", line 508, in request
    resp = self.send(prep, **send_kwargs)
  File "lib\requests\sessions.py", line 618, in send
    r = adapter.send(request, **kwargs)
  File "lib\requests\adapters.py", line 508, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPSConnectionPool(host='api.imgur.com', port=443): Max retries exceeded with url: /3/credits (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x0000000005D79828>: Failed to establish a new connection: [Errno 11004] getaddrinfo failed',))
[16/10/2017 01:39] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[16/10/2017 01:39] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[16/10/2017 01:40] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[16/10/2017 01:40] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[16/10/2017 01:42] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:48] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:48] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:49] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:50] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:51] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 01:52] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[16/10/2017 14:19] ERROR audio _join_voice_channel 702: 
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 410, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError
[16/10/2017 14:19] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 410, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 704, in _join_voice_channel
    raise ConnectTimeout("We timed out connecting to a voice channel,"
cogs.audio.ConnectTimeout: We timed out connecting to a voice channel, please try again in 10 minutes.
[16/10/2017 14:20] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\audio.py", line 695, in _join_voice_channel
    " seconds.".format(diff))
cogs.audio.ConnectTimeout: You are on connect cooldown for another 254 seconds.
[18/10/2017 09:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[18/10/2017 09:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 09:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 09:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 18:21] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 723, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]]
[18/10/2017 18:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[18/10/2017 18:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
ConnectionResetError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno None] Can not connect to discordapp.com:443 [None]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno None] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [None]]
[18/10/2017 19:21] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[18/10/2017 19:22] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 19:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 723, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]]
[18/10/2017 19:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 286, in result
    raise CancelledError
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[18/10/2017 19:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 19:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[18/10/2017 19:34] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 286, in result
    raise CancelledError
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[18/10/2017 19:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 286, in result
    raise CancelledError
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[18/10/2017 19:49] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 286, in result
    raise CancelledError
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[18/10/2017 20:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[18/10/2017 20:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 802, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 828, in _create_connection_transport
    yield from waiter
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 286, in result
    raise CancelledError
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[20/10/2017 20:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[20/10/2017 20:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[20/10/2017 20:24] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[20/10/2017 20:25] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:26] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:26] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:27] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:28] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[20/10/2017 20:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[21/10/2017 05:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[21/10/2017 05:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:12] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:12] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:12] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 05:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:02] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[21/10/2017 18:02] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:03] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:03] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:03] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/10/2017 18:09] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:42] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:42] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:42] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 06:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[22/10/2017 23:01] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[23/10/2017 02:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[23/10/2017 02:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:48] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:55] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[23/10/2017 02:55] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:56] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:56] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:56] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:56] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:57] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:57] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:57] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 02:58] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[23/10/2017 03:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:06] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:07] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:08] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 03:09] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 13:43] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[23/10/2017 13:44] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[23/10/2017 13:45] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[23/10/2017 13:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[25/10/2017 05:24] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[25/10/2017 14:48] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[25/10/2017 23:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[26/10/2017 15:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[26/10/2017 15:33] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[26/10/2017 15:47] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[26/10/2017 16:40] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[26/10/2017 16:41] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[27/10/2017 15:56] ERROR owner load 68: ('inconsistent use of tabs and spaces in indentation', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 22, 22, '\tasync def emo(self):\n'))
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 945, in _load_cog
    mod_obj = importlib.import_module(cogname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 985, in _gcd_import
  File "<frozen importlib._bootstrap>", line 968, in _find_and_load
  File "<frozen importlib._bootstrap>", line 957, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 673, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 693, in exec_module
  File "<frozen importlib._bootstrap_external>", line 799, in get_code
  File "<frozen importlib._bootstrap_external>", line 759, in source_to_code
  File "<frozen importlib._bootstrap>", line 222, in _call_with_frames_removed
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\Emo.py", line 22
    async def emo(self):
                       ^
TabError: inconsistent use of tabs and spaces in indentation

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 64, in load
    self._load_cog(module)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 949, in _load_cog
    raise CogLoadError(*e.args)
cogs.owner.CogLoadError: ('inconsistent use of tabs and spaces in indentation', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 22, 22, '\tasync def emo(self):\n'))
[28/10/2017 22:49] ERROR owner _reload 155: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 13, 4, '    def __init__(self, bot):\n'))
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 945, in _load_cog
    mod_obj = importlib.import_module(cogname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 985, in _gcd_import
  File "<frozen importlib._bootstrap>", line 968, in _find_and_load
  File "<frozen importlib._bootstrap>", line 957, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 673, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 693, in exec_module
  File "<frozen importlib._bootstrap_external>", line 799, in get_code
  File "<frozen importlib._bootstrap_external>", line 759, in source_to_code
  File "<frozen importlib._bootstrap>", line 222, in _call_with_frames_removed
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\Emo.py", line 13
    def __init__(self, bot):
    ^
IndentationError: unexpected indent

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 149, in _reload
    self._load_cog(module)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 949, in _load_cog
    raise CogLoadError(*e.args)
cogs.owner.CogLoadError: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 13, 4, '    def __init__(self, bot):\n'))
[28/10/2017 22:50] ERROR owner _reload 155: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 13, 4, '    def __init__(self, bot):\n'))
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 945, in _load_cog
    mod_obj = importlib.import_module(cogname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 985, in _gcd_import
  File "<frozen importlib._bootstrap>", line 968, in _find_and_load
  File "<frozen importlib._bootstrap>", line 957, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 673, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 693, in exec_module
  File "<frozen importlib._bootstrap_external>", line 799, in get_code
  File "<frozen importlib._bootstrap_external>", line 759, in source_to_code
  File "<frozen importlib._bootstrap>", line 222, in _call_with_frames_removed
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\Emo.py", line 13
    def __init__(self, bot):
    ^
IndentationError: unexpected indent

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 149, in _reload
    self._load_cog(module)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 949, in _load_cog
    raise CogLoadError(*e.args)
cogs.owner.CogLoadError: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 13, 4, '    def __init__(self, bot):\n'))
[28/10/2017 22:51] ERROR owner _reload 155: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 12, 4, '    def __init__(self, bot):\n'))
Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 945, in _load_cog
    mod_obj = importlib.import_module(cogname)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 985, in _gcd_import
  File "<frozen importlib._bootstrap>", line 968, in _find_and_load
  File "<frozen importlib._bootstrap>", line 957, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 673, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 693, in exec_module
  File "<frozen importlib._bootstrap_external>", line 799, in get_code
  File "<frozen importlib._bootstrap_external>", line 759, in source_to_code
  File "<frozen importlib._bootstrap>", line 222, in _call_with_frames_removed
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\Emo.py", line 12
    def __init__(self, bot):
    ^
IndentationError: unexpected indent

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 149, in _reload
    self._load_cog(module)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\owner.py", line 949, in _load_cog
    raise CogLoadError(*e.args)
cogs.owner.CogLoadError: ('unexpected indent', ('C:\\Users\\Administrator\\Desktop\\Red-DiscordBot\\cogs\\Emo.py', 12, 4, '    def __init__(self, bot):\n'))
[30/10/2017 11:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[30/10/2017 11:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[30/10/2017 11:05] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[31/10/2017 03:14] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[31/10/2017 03:22] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[31/10/2017 03:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[31/10/2017 20:54] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[02/11/2017 02:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[02/11/2017 02:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:31] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:31] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:31] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 02:32] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[02/11/2017 13:21] ERROR red on_command_error 369: Exception in command 'sauce'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\sauce.py", line 30, in sauce
    return await self.bot.say((self.bot.bot_prefix + 'Input a link to check the source. Ex: ``>sauce http://i.imgur.com/NIq2U67.png``'))
  File "lib\discord\client.py", line 296, in __getattr__
    raise AttributeError(msg.format(self.__class__, name))
AttributeError: '<class '__main__.Bot'>' object has no attribute 'bot_prefix'
[02/11/2017 13:21] ERROR red on_command_error 369: Exception in command 'sauce'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\Administrator\Desktop\Red-DiscordBot\cogs\sauce.py", line 30, in sauce
    return await self.bot.say((self.bot.bot_prefix + 'Input a link to check the source. Ex: ``>sauce http://i.imgur.com/NIq2U67.png``'))
  File "lib\discord\client.py", line 296, in __getattr__
    raise AttributeError(msg.format(self.__class__, name))
AttributeError: '<class '__main__.Bot'>' object has no attribute 'bot_prefix'
[07/11/2017 09:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:14] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:17] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:18] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:18] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:19] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[07/11/2017 09:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[07/11/2017 09:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[07/11/2017 09:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[07/11/2017 09:21] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:22] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:24] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:24] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:25] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:26] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[07/11/2017 09:27] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:28] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:28] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:29] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[07/11/2017 09:31] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[18/11/2017 03:16] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[21/11/2017 08:57] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 776, in create_connection
    raise exceptions[0]
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 763, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 381, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 310, in _wakeup
    future.result()
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 294, in result
    raise self._exception
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 242, in _step
    result = coro.throw(exc)
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[25/11/2017 15:28] ERROR owner load 74: The alias shipStat is already an existing command or alias.
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 65, in load
    self._load_cog(module)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 948, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\azur.py", line 168, in setup
    bot.add_cog(azur(bot))
  File "lib\discord\ext\commands\bot.py", line 655, in add_cog
    self.add_command(member)
  File "lib\discord\ext\commands\core.py", line 492, in add_command
    raise discord.ClientException('The alias {} is already an existing command or alias.'.format(alias))
discord.errors.ClientException: The alias shipStat is already an existing command or alias.
[25/11/2017 15:31] ERROR red on_command_error 369: Exception in command 'reload'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 150, in _reload
    self._load_cog(module)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 948, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\azur.py", line 168, in setup
    bot.add_cog(azur(bot))
  File "lib\discord\ext\commands\bot.py", line 655, in add_cog
    self.add_command(member)
  File "lib\discord\ext\commands\core.py", line 492, in add_command
    raise discord.ClientException('The alias {} is already an existing command or alias.'.format(alias))
discord.errors.ClientException: The alias shipStat is already an existing command or alias.
[25/11/2017 17:13] ERROR red on_command_error 369: Exception in command 'shipstat'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\azur.py", line 148, in shipstat
    skillDict.update({"**"+first[2]+"**"+": ":first[3]+"\n","**"+second[2]+"**"+": ":second[3]+"\n","**"+third[2]+"**"+": ":third[3]})
IndexError: list index out of range
[26/11/2017 03:55] ERROR red load_cogs 573: You need to run `pip3 install pillow`
Traceback (most recent call last):
  File "red.py", line 570, in load_cogs
    owner_cog._load_cog(extension)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 948, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\spoiler.py", line 111, in setup
    raise RuntimeError("You need to run `pip3 install pillow`")
RuntimeError: You need to run `pip3 install pillow`
[26/11/2017 03:58] ERROR red on_command_error 369: Exception in command 'sukeinyaa'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\nyaa.py", line 118, in sukeinyaa
    for res in result[0:int(count):]:
TypeError: unhashable type: 'slice'
[26/11/2017 14:36] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 358, in wait_for
    return fut.result()
  File "lib\discord\client.py", line 3208, in join_voice_channel
    voice = VoiceClient(**kwargs)
  File "lib\discord\voice_client.py", line 217, in __init__
    raise RuntimeError("PyNaCl library needed in order to use voice")
RuntimeError: PyNaCl library needed in order to use voice
[26/11/2017 15:41] ERROR red on_command_error 369: Exception in command 'listEmo'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 94, in listEmo
    await self.bot.say(content = None, embed=em)
  File "lib\discord\ext\commands\bot.py", line 309, in _augmented_msg
    msg = yield from coro
  File "red.py", line 92, in send_message
    return await super().send_message(*args, **kwargs)
  File "lib\discord\client.py", line 1151, in send_message
    data = yield from self.http.send_message(channel_id, content, guild_id=guild_id, tts=tts, embed=embed)
  File "lib\discord\http.py", line 200, in request
    raise HTTPException(r, data)
discord.errors.HTTPException: BAD REQUEST (status code: 400)
[27/11/2017 09:02] ERROR red on_command_error 369: Exception in command 'emo'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 65, in emo
    await self.bot.send_file(channel, urlEmo)
  File "lib\discord\client.py", line 1225, in send_file
    with open(fp, 'rb') as f:
FileNotFoundError: [Errno 2] No such file or directory: 'data/emos/static/vampy/shindeiru.png'
[27/11/2017 09:04] ERROR red on_command_error 369: Exception in command 'emo'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 64, in emo
    urlEmo = self._get_emo(emo)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 46, in _get_emo
    if emoName in list2:
NameError: name 'list2' is not defined
[27/11/2017 09:04] ERROR red on_command_error 369: Exception in command 'emo'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 64, in emo
    urlEmo = self._get_emo(emo)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 46, in _get_emo
    if emoName in list2:
NameError: name 'list2' is not defined
[27/11/2017 09:08] ERROR owner _reload 156: ('invalid syntax', ('C:\\Users\\DiscordBot\\Desktop\\Red-DiscordBot\\Red-DiscordBot\\cogs\\Emo.py', 46, 15, '        else if emoName in lists2:\n'))
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 946, in _load_cog
    mod_obj = importlib.import_module(cogname)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 665, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 674, in exec_module
  File "<frozen importlib._bootstrap_external>", line 781, in get_code
  File "<frozen importlib._bootstrap_external>", line 741, in source_to_code
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\Emo.py", line 46
    else if emoName in lists2:
          ^
SyntaxError: invalid syntax

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 150, in _reload
    self._load_cog(module)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\owner.py", line 950, in _load_cog
    raise CogLoadError(*e.args)
cogs.owner.CogLoadError: ('invalid syntax', ('C:\\Users\\DiscordBot\\Desktop\\Red-DiscordBot\\Red-DiscordBot\\cogs\\Emo.py', 46, 15, '        else if emoName in lists2:\n'))
[28/11/2017 08:57] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 777, in create_connection
    raise exceptions[0]
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 764, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[01/12/2017 16:08] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 358, in wait_for
    return fut.result()
  File "lib\discord\client.py", line 3210, in join_voice_channel
    yield from voice.connect()
  File "lib\discord\voice_client.py", line 251, in connect
    self.endpoint = self.endpoint.replace(':80', '')
AttributeError: 'NoneType' object has no attribute 'replace'
[01/12/2017 16:08] ERROR audio _join_voice_channel 702: 
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 362, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError
[01/12/2017 16:08] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 362, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 704, in _join_voice_channel
    raise ConnectTimeout("We timed out connecting to a voice channel,"
cogs.audio.ConnectTimeout: We timed out connecting to a voice channel, please try again in 10 minutes.
[01/12/2017 16:08] ERROR red on_command_error 369: Exception in command 'queue'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1738, in _queue
    await ctx.invoke(self.play, url_or_search_terms=url)
  File "lib\discord\ext\commands\context.py", line 112, in invoke
    ret = yield from command.callback(*arguments, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 695, in _join_voice_channel
    " seconds.".format(diff))
cogs.audio.ConnectTimeout: You are on connect cooldown for another 290 seconds.
[01/12/2017 16:09] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 695, in _join_voice_channel
    " seconds.".format(diff))
cogs.audio.ConnectTimeout: You are on connect cooldown for another 262 seconds.
[01/12/2017 16:09] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 695, in _join_voice_channel
    " seconds.".format(diff))
cogs.audio.ConnectTimeout: You are on connect cooldown for another 225 seconds.
[01/12/2017 16:24] ERROR audio _join_voice_channel 702: 
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 362, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError
[01/12/2017 16:24] ERROR red on_command_error 369: Exception in command 'play'
Traceback (most recent call last):
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 700, in _join_voice_channel
    timeout=5, loop=self.bot.loop)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\tasks.py", line 362, in wait_for
    raise futures.TimeoutError()
concurrent.futures._base.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 1456, in play
    await self._join_voice_channel(voice_channel)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\audio.py", line 704, in _join_voice_channel
    raise ConnectTimeout("We timed out connecting to a voice channel,"
cogs.audio.ConnectTimeout: We timed out connecting to a voice channel, please try again in 10 minutes.
[01/12/2017 16:45] ERROR red on_command_error 369: Exception in command 'emote update'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\emotes.py", line 202, in emote_update
    await self.update_emote_list()
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\emotes.py", line 65, in update_emote_list
    resp = await r.json()
  File "lib\aiohttp\client_reqrep.py", line 789, in json
    return loads(stripped.decode(encoding))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\json\__init__.py", line 354, in loads
    return _default_decoder.decode(s)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\json\decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\json\decoder.py", line 357, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
[01/12/2017 21:36] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 724, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 202, in _request
    yield from resp.start(conn, read_until_eof)
  File "lib\aiohttp\client_reqrep.py", line 640, in start
    message = yield from httpstream.read()
  File "lib\aiohttp\streams.py", line 641, in read
    result = yield from super().read()
  File "lib\aiohttp\streams.py", line 476, in read
    yield from self._waiter
aiohttp.errors.ServerDisconnectedError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 209, in _request
    raise aiohttp.ClientResponseError() from exc
aiohttp.errors.ClientResponseError
[10/12/2017 20:09] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 777, in create_connection
    raise exceptions[0]
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 764, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[10/12/2017 20:09] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:10] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:11] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:12] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:12] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:14] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:14] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:15] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:15] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:16] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:16] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:17] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:17] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:18] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:18] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:19] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:19] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:21] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:21] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:22] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:22] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:23] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:24] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:25] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[10/12/2017 20:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[13/12/2017 13:48] ERROR red on_command_error 369: Exception in command 'send channel'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\DiscordBot\Desktop\Red-DiscordBot\Red-DiscordBot\cogs\say.py", line 51, in channel
    if server.id not in self.settings:
AttributeError: 'NoneType' object has no attribute 'id'
[16/12/2017 23:46] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 777, in create_connection
    raise exceptions[0]
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 764, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
TimeoutError: [Errno 10060] Connect call failed ('104.16.59.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10060] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.59.5', 443)]]
[18/12/2017 07:20] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[25/12/2017 10:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[25/12/2017 10:04] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\concurrent\futures\thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\socket.py", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11004] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[14/01/2018 14:13] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 803, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 829, in _create_connection_transport
    yield from waiter
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[14/01/2018 14:18] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 803, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 829, in _create_connection_transport
    yield from waiter
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[14/01/2018 14:25] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 803, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 829, in _create_connection_transport
    yield from waiter
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 603, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 451, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=True)
  File "lib\discord\gateway.py", line 198, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
[14/01/2018 14:30] ERROR red <module> 634: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 803, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 829, in _create_connection_transport
    yield from waiter
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 614, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\DiscordBot\AppData\Local\Programs\Python\Python36\lib\asyncio\base_events.py", line 467, in run_until_complete
    return future.result()
  File "red.py", line 599, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 258, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\async_timeout\__init__.py", line 35, in __exit__
    self._do_exit(exc_type)
  File "lib\async_timeout\__init__.py", line 80, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError
